{"ast":null,"code":"var _jsxFileName = \"/Users/jeewan/Desktop/SentryHealth/frontend-code-challenge/src/App.jsx\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Axios from 'axios';\nimport './App.css';\nconst URL_PATH = \"https://gist.githubusercontent.com/bar0191/fae6084225b608f25e98b733864a102b/raw/dea83ea9cf4a8a6022bfc89a8ae8df5ab05b6dcc/pokemon.json\";\n\nconst App = () => {\n  const [input, setInput] = useState([]);\n  const [check, setCheck] = useState(false);\n  const [originalResult, setoriginalResult] = useState([]);\n  const [changedResult, setchangedResult] = useState([]); //variables\n\n  let self = this;\n  const el = useRef(null);\n  useEffect(() => {\n    (async () => {\n      //fetching the data\n      const res = await Axios.get(URL_PATH);\n      setInput(res.data);\n    })();\n  }, []); //function for sorting by Name\n\n  function compareName(a, b) {\n    // converting to uppercase to have case-insensitive comparison\n    const name1 = a.Name.toLowerCase();\n    const name2 = b.Name.toLowerCase();\n    let comparison = 0;\n\n    if (name1 > name2) {\n      comparison = 1;\n    } else if (name1 < name2) {\n      comparison = -1;\n    }\n\n    return comparison;\n  } //function to sort by Types\n\n\n  function compareTypes(a, b) {\n    //will only take the first value of Types\n    const type1 = a.Types[0].toLowerCase();\n    const type2 = b.Types[0].toLowerCase();\n    let comparison = 0;\n\n    if (type1 > type2) {\n      comparison = 1;\n    } else if (type1 < type2) {\n      comparison = -1;\n    }\n\n    return comparison;\n  } //function to sort by MaxCP\n\n\n  function compareCP(a, b) {\n    // converting to uppercase to have case-insensitive comparison\n    const cp1 = a.MaxCP;\n    const cp2 = b.MaxCP;\n    let comparison = 0;\n\n    if (cp1 > cp2) {\n      comparison = -1;\n    } else if (cp1 < cp2) {\n      comparison = 1;\n    }\n\n    return comparison;\n  }\n\n  const catchText = event => {\n    let val = event.target.value.toLowerCase(); //filtering when user inputs character\n\n    let filteredObjects = input.filter(item => item.Types[1] !== undefined ? item.Types[0].toLowerCase().includes(val) || item.Types[1].toLowerCase().includes(val) || item.Name.toLowerCase().includes(val) : item.Types[0].toLowerCase().includes(val) || item.Name.toLowerCase().includes(val));\n    setoriginalResult(filteredObjects); //reducing search results to 4\n\n    let filteredFour = filteredObjects.length > 4 ? filteredObjects.slice(0, 4) : filteredObjects;\n    let sortedByNameorType;\n    filteredFour.map(item => {\n      return item.Name.toLowerCase().includes(val) ? sortedByNameorType = filteredFour.sort(compareName) : sortedByNameorType = filteredFour.sort(compareTypes);\n    }); //console.log('sortedByNameorType', sortedByNameorType)\n    //set the state with four results\n\n    setchangedResult(sortedByNameorType);\n    console.log('ul is', this._ul);\n  }; //user can toggle on/off to sort by maximum combat points (MaxCP)\n\n\n  if (check === true) {\n    //let newOriginalResult = originalResult.slice(0,4).sort(compareCP)\n    //setoriginalResult(originalResult.slice(0,4).sort(compareCP))\n    console.log('originalResult', originalResult);\n  } else if (check === false) {\n    console.log('changedResult', changedResult);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"maxCP\",\n    className: \"max-cp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"maxCP\",\n    onClick: () => setCheck(!check),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Maximum Combat Points\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input\",\n    placeholder: \"Pokemon or type\",\n    onChange: catchText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"suggestions\",\n    ref: el => self._ul = el,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, check ? originalResult.slice(0, 4).sort(compareCP).map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"hl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }\n  }), item.Name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"type electric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, item.Types[0]), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"type normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, item.Types[1]))), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://cyndiquil721.files.wordpress.com/2014/02/missingno.png\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"no-results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, \"No results\"))))) : ''));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/jeewan/Desktop/SentryHealth/frontend-code-challenge/src/App.jsx"],"names":["React","useEffect","useState","useRef","Axios","URL_PATH","App","input","setInput","check","setCheck","originalResult","setoriginalResult","changedResult","setchangedResult","self","el","res","get","data","compareName","a","b","name1","Name","toLowerCase","name2","comparison","compareTypes","type1","Types","type2","compareCP","cp1","MaxCP","cp2","catchText","event","val","target","value","filteredObjects","filter","item","undefined","includes","filteredFour","length","slice","sortedByNameorType","map","sort","console","log","_ul"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Axios from 'axios'\nimport './App.css';\n\nconst URL_PATH = \"https://gist.githubusercontent.com/bar0191/fae6084225b608f25e98b733864a102b/raw/dea83ea9cf4a8a6022bfc89a8ae8df5ab05b6dcc/pokemon.json\";\n\nconst App = () => {\n    const [ input, setInput ] = useState([])\n    const [ check, setCheck ] = useState(false)\n    const [ originalResult, setoriginalResult ] = useState([])\n    const [ changedResult, setchangedResult ] = useState([])\n    //variables\n    \n    let self = this;\n    const el = useRef(null)\n\n    useEffect(() => {\n        (async () => {\n            //fetching the data\n            const res = await Axios.get(URL_PATH);\n            setInput(res.data)\n        })();\n    }, []);\n\n    //function for sorting by Name\n    function compareName(a,b){\n        // converting to uppercase to have case-insensitive comparison\n        const name1 = a.Name.toLowerCase();\n        const name2 = b.Name.toLowerCase();\n\n        let comparison = 0\n        if(name1 > name2){\n            comparison = 1\n        } else if(name1 < name2){\n            comparison = -1\n        }\n        return comparison\n    }\n\n    //function to sort by Types\n    function compareTypes(a,b){\n        //will only take the first value of Types\n        const type1 = a.Types[0].toLowerCase();\n        const type2 = b.Types[0].toLowerCase();\n\n        let comparison = 0\n        if(type1 > type2){\n            comparison = 1\n        } else if(type1 < type2){\n            comparison = -1\n        }\n        return comparison\n    }\n\n    //function to sort by MaxCP\n    function compareCP(a,b){\n        // converting to uppercase to have case-insensitive comparison\n        const cp1 = a.MaxCP;\n        const cp2 = b.MaxCP;\n\n        let comparison = 0\n        if(cp1 > cp2){\n            comparison = -1\n        } else if(cp1 < cp2){\n            comparison = 1\n        }\n        return comparison\n    }\n\n    \n\n    const catchText = event => {\n        let val = (event.target.value).toLowerCase()\n        //filtering when user inputs character\n        let filteredObjects = input.filter(item => item.Types[1] !== undefined ? (item.Types[0].toLowerCase().includes(val) || item.Types[1].toLowerCase().includes(val) || item.Name.toLowerCase().includes(val)) : (item.Types[0].toLowerCase().includes(val) || item.Name.toLowerCase().includes(val)))\n        \n        setoriginalResult(filteredObjects)\n        //reducing search results to 4\n        let filteredFour = filteredObjects.length > 4 ? filteredObjects.slice(0,4) : filteredObjects \n        \n        let sortedByNameorType\n\n        filteredFour.map(item => {\n            return item.Name.toLowerCase().includes(val) ?\n            sortedByNameorType = filteredFour.sort(compareName) :\n            sortedByNameorType = filteredFour.sort(compareTypes)\n        })\n        //console.log('sortedByNameorType', sortedByNameorType)\n        //set the state with four results\n        setchangedResult(sortedByNameorType)\n\n        console.log('ul is', this._ul)\n    }\n\n      //user can toggle on/off to sort by maximum combat points (MaxCP)\n       if(check === true){\n        //let newOriginalResult = originalResult.slice(0,4).sort(compareCP)\n        //setoriginalResult(originalResult.slice(0,4).sort(compareCP))\n        console.log('originalResult', originalResult)\n       }else if(check === false){\n          console.log('changedResult', changedResult)\n       }\n     \n\n    return (\n    <> \n        <label htmlFor=\"maxCP\" className=\"max-cp\">\n            <input type=\"checkbox\" id=\"maxCP\" onClick={() => setCheck(!check)} />\n            <small>\n                Maximum Combat Points\n            </small>\n        </label>\n        <input type=\"text\" className=\"input\" placeholder=\"Pokemon or type\" onChange={catchText}/>\n        <div className=\"loader\"></div>\n        <ul className=\"suggestions\" ref={el => self._ul = el}>\n            {check ? originalResult.slice(0,4).sort(compareCP).map(item => \n                (\n                 <>\n                    <li>\n                        \n                        <div className=\"info\">\n                            <h1>\n                            <span className=\"hl\">{}</span>{item.Name}</h1>\n                            <span className=\"type electric\">{item.Types[0]}</span>\n                            <span className=\"type normal\">{item.Types[1]}</span>\n                        </div>\n                    </li>\n                    <li>\n                        <img src=\"https://cyndiquil721.files.wordpress.com/2014/02/missingno.png\" alt=\"\" />\n                        <div className=\"info\">\n                            <h1 className=\"no-results\">\n                                No results\n                            </h1>\n                        </div>\n                    </li>\n                </>\n                )\n            ):''}\n             \n            \n        </ul>\n    </>\n    )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}