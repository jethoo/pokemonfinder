{"ast":null,"code":"var _jsxFileName = \"/Users/jeewan/Desktop/SentryHealth/frontend-code-challenge/src/App.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport SearchView from './SearchView';\nconst URL_PATH = \"https://gist.githubusercontent.com/bar0191/fae6084225b608f25e98b733864a102b/raw/dea83ea9cf4a8a6022bfc89a8ae8df5ab05b6dcc/pokemon.json\";\n\nconst App = () => {\n  const [fetchedResult, setfetchedResult] = useState([]);\n  const [check, setCheck] = useState(false);\n  const [firstFilter, setfirstFilter] = useState([]);\n  const [secondFilter, setsecondFilter] = useState([]);\n  const [userEntered, setuserEntered] = useState([]); //variables\n\n  useEffect(() => {\n    (async () => {\n      //fetching the data\n      const res = await Axios.get(URL_PATH);\n      setfetchedResult(res.data);\n    })();\n  }, []); //function for sorting by Name\n\n  function compareName(a, b) {\n    // converting to uppercase to have case-insensitive comparison\n    const name1 = a.Name.toLowerCase();\n    const name2 = b.Name.toLowerCase();\n    let comparison = 0;\n\n    if (name1 > name2) {\n      comparison = 1;\n    } else if (name1 < name2) {\n      comparison = -1;\n    }\n\n    return comparison;\n  } //function to sort by Types\n\n\n  function compareTypes(a, b) {\n    //will only take the first value of Types\n    const type1 = a.Types[0].toLowerCase();\n    const type2 = b.Types[0].toLowerCase();\n    let comparison = 0;\n\n    if (type1 > type2) {\n      comparison = 1;\n    } else if (type1 < type2) {\n      comparison = -1;\n    }\n\n    return comparison;\n  } //function to sort by MaxCP\n\n\n  function compareCP(a, b) {\n    // converting to uppercase to have case-insensitive comparison\n    const cp1 = a.MaxCP;\n    const cp2 = b.MaxCP;\n    let comparison = 0;\n\n    if (cp1 > cp2) {\n      comparison = -1;\n    } else if (cp1 < cp2) {\n      comparison = 1;\n    }\n\n    return comparison;\n  }\n\n  const findMatch = event => {\n    let userInput = event.target.value.toLowerCase(); //setting the state of user input\n\n    setuserEntered(userInput); //filtering when user inputs character\n\n    let filteredObjects = fetchedResult.filter(item => item.Types[1] !== undefined ? item.Types[0].toLowerCase().includes(userInput) || item.Types[1].toLowerCase().includes(userInput) || item.Name.toLowerCase().includes(userInput) : item.Types[0].toLowerCase().includes(userInput) || item.Name.toLowerCase().includes(userInput));\n    setfirstFilter(filteredObjects); //reducing search results to 4\n\n    let filteredFour = filteredObjects.length > 4 ? filteredObjects.slice(0, 4) : filteredObjects;\n    let sortedByNameorType;\n    filteredFour.map(item => {\n      return item.Name.toLowerCase().includes(userInput) ? sortedByNameorType = filteredFour.sort(compareName) : sortedByNameorType = filteredFour.sort(compareTypes);\n    }); //console.log('sortedByNameorType', sortedByNameorType)\n    //set the state with four results\n\n    setsecondFilter(sortedByNameorType);\n  }; //let newfirstFilter = firstFilter.slice(0,4).sort(compareCP)\n  //setfirstFilter(firstFilter.slice(0,4).sort(compareCP))\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"maxCP\",\n    className: \"max-cp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"maxCP\",\n    onClick: () => setCheck(!check),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Maximum Combat Points\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input\",\n    placeholder: \"Pokemon or type\",\n    onChange: findMatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SearchView, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/jeewan/Desktop/SentryHealth/frontend-code-challenge/src/App.jsx"],"names":["React","useEffect","useState","Axios","SearchView","URL_PATH","App","fetchedResult","setfetchedResult","check","setCheck","firstFilter","setfirstFilter","secondFilter","setsecondFilter","userEntered","setuserEntered","res","get","data","compareName","a","b","name1","Name","toLowerCase","name2","comparison","compareTypes","type1","Types","type2","compareCP","cp1","MaxCP","cp2","findMatch","event","userInput","target","value","filteredObjects","filter","item","undefined","includes","filteredFour","length","slice","sortedByNameorType","map","sort"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios'\nimport './App.css';\nimport SearchView from './SearchView'\n\nconst URL_PATH = \"https://gist.githubusercontent.com/bar0191/fae6084225b608f25e98b733864a102b/raw/dea83ea9cf4a8a6022bfc89a8ae8df5ab05b6dcc/pokemon.json\";\n\nconst App = () => {\n    const [ fetchedResult, setfetchedResult] = useState([])\n    const [ check, setCheck ] = useState(false)\n    const [ firstFilter, setfirstFilter ] = useState([])\n    const [ secondFilter, setsecondFilter ] = useState([])\n    const [ userEntered, setuserEntered ] = useState([])\n    //variables\n\n    useEffect(() => {\n        (async () => {\n            //fetching the data\n            const res = await Axios.get(URL_PATH);\n            setfetchedResult(res.data)\n        })();\n    }, []);\n    \n    //function for sorting by Name\n    function compareName(a,b){\n        // converting to uppercase to have case-insensitive comparison\n        const name1 = a.Name.toLowerCase();\n        const name2 = b.Name.toLowerCase();\n\n        let comparison = 0\n        if(name1 > name2){\n            comparison = 1\n        } else if(name1 < name2){\n            comparison = -1\n        }\n        return comparison\n    }\n\n    //function to sort by Types\n    function compareTypes(a,b){\n        //will only take the first value of Types\n        const type1 = a.Types[0].toLowerCase();\n        const type2 = b.Types[0].toLowerCase();\n\n        let comparison = 0\n        if(type1 > type2){\n            comparison = 1\n        } else if(type1 < type2){\n            comparison = -1\n        }\n        return comparison\n    }\n\n    //function to sort by MaxCP\n    function compareCP(a,b){\n        // converting to uppercase to have case-insensitive comparison\n        const cp1 = a.MaxCP;\n        const cp2 = b.MaxCP;\n\n        let comparison = 0\n        if(cp1 > cp2){\n            comparison = -1\n        } else if(cp1 < cp2){\n            comparison = 1\n        }\n        return comparison\n    }\n    \n    const findMatch = event => {\n        let userInput = (event.target.value).toLowerCase()\n        //setting the state of user input\n        setuserEntered(userInput)\n\n        //filtering when user inputs character\n        let filteredObjects = fetchedResult.filter(item => item.Types[1] !== undefined ? (item.Types[0].toLowerCase().includes(userInput) || item.Types[1].toLowerCase().includes(userInput) || item.Name.toLowerCase().includes(userInput)) : (item.Types[0].toLowerCase().includes(userInput) || item.Name.toLowerCase().includes(userInput)))\n        setfirstFilter(filteredObjects)\n\n        //reducing search results to 4\n        let filteredFour = filteredObjects.length > 4 ? filteredObjects.slice(0,4) : filteredObjects \n        \n        let sortedByNameorType\n\n        filteredFour.map(item => {\n            return item.Name.toLowerCase().includes(userInput) ?\n            sortedByNameorType = filteredFour.sort(compareName) :\n            sortedByNameorType = filteredFour.sort(compareTypes)\n        })\n        //console.log('sortedByNameorType', sortedByNameorType)\n        //set the state with four results\n        setsecondFilter(sortedByNameorType);\n\n    }\n        //let newfirstFilter = firstFilter.slice(0,4).sort(compareCP)\n        //setfirstFilter(firstFilter.slice(0,4).sort(compareCP))\n    return (\n      \n    <> \n        <label htmlFor=\"maxCP\" className=\"max-cp\">\n            <input type=\"checkbox\" id=\"maxCP\" onClick={() => setCheck(!check)} />\n            <small>\n                Maximum Combat Points\n            </small>\n        </label>\n        <input type=\"text\" className=\"input\" placeholder=\"Pokemon or type\" onChange={findMatch}/>\n        <div className=\"loader\"></div>\n        <SearchView check/>\n        \n    </>\n    )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}